bubble_bench:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.CONTAINER,Facing.PLAYER,None,Sound.INDUSTRIAL,['bubble_bench'],[<Uses.GUI: '--local.uses.gui'>, <Uses.BRIGHTNESS_FIX: '--local.uses.brightness_fix'>],[BlockData.RecipeEntry(group='block', name='crafting_table', count=1), BlockData.RecipeEntry(group='item', name='glass_bottle', count=1)],block,bubble_bench,minecraft:item_frame;table:;shelf:;cabinet:;drawer:;cupboard:;bench:;couch:;stool:;barstool:;dinning_chair:;blinds:;kitchen_cabinet:;fridge:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.CONTAINER,BlockData.BlockStates(match='@self', block_states=[BlockData.State(name='default', predicates=[]), BlockData.State(name='freezer', predicates=['~~~~1~'])]),Facing.PLAYER,Sound.INDUSTRIAL,['fridge'],[<Uses.BLOCKSTATES: '--local.uses.blockstates'>, <Uses.BRIGHTNESS_FIX: '--local.uses.brightness_fix'>],[BlockData.RecipeEntry(group='block', name='iron_block', count=4)],block,fridge,minecraft:item_frame;washer:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.HOPPER,BlockData.BlockStates(match='@self', block_states=[BlockData.State(name='default', predicates=[]), BlockData.State(name='full', predicates=[])]),Facing.PLAYER,Sound.INDUSTRIAL,['washer'],[<Uses.TICK: '--local.uses.tick'>],[BlockData.RecipeEntry(group='block', name='iron_block', count=4), BlockData.RecipeEntry(group='item', name='bucket', count=1)],block,minecraft:item_frame,washer;trashcan:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.CHAIN,Facing.NONE,None,Sound.WOOD,['trashcan'],[<Uses.PLACE: '--local.uses.place'>, <Uses.BRIGHTNESS_FIX: '--local.uses.brightness_fix'>],[BlockData.RecipeEntry(group='block', name='iron_block', count=4)],block,minecraft:item_frame,trashcan;table_lamp:;street_light:;desk_lamp:;upholstery_couch:;floor_lamp:;curtains:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.VOID,BlockData.BlockStates(match='@self', block_states=[BlockData.State(name='top_closed', predicates=[]), BlockData.State(name='top_left', predicates=[]), BlockData.State(name='top_right', predicates=[]), BlockData.State(name='bottom_closed', predicates=[]), BlockData.State(name='bottom_left', predicates=[]), BlockData.State(name='bottom_right', predicates=[]), BlockData.State(name='middle', predicates=[]), BlockData.State(name='empty', predicates=[])]),Facing.WALL_NORMAL,Sound.SOFT,['curtains'],[<Uses.PLACE: '--local.uses.place'>],[BlockData.RecipeEntry(group='block', name='red_wool', count=6)],block,curtains,minecraft:item_frame;ladder:;padlock_block:;rising_door:;pipe:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.VOID,BlockData.BlockStates(match='@self', block_states=[BlockData.State(name='default', predicates=[]), BlockData.State(name='straight', predicates=['110000:0', '001100:90', '0100000:0', '000100:90', '100000:0', '001000:90']), BlockData.State(name='angle_left', predicates=['101000:0', '100100:-90', '011000:90', '010100:180']), BlockData.State(name='angle_up', predicates=['001010:90', '000110:-90', '100010:0', '010010:180']), BlockData.State(name='angle_down', predicates=['001001:90', '000101:-90', '100001:0', '010001:180'])]),Facing.NONE,Sound.INDUSTRIAL,['pipe'],[<Uses.BLOCKSTATES: '--local.uses.blockstates'>],[BlockData.RecipeEntry(group='block', name='copper_block', count=1)],block,minecraft:item_frame,pipe;radiator:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.CONTAINER,BlockData.BlockStates(match='<manual>', block_states=[BlockData.State(name='off', predicates=[]), BlockData.State(name='on', predicates=[])]),Facing.PLAYER,Sound.INDUSTRIAL,['radiator'],[<Uses.GUI: '--local.uses.gui'>, <Uses.BRIGHTNESS_FIX: '--local.uses.brightness_fix'>],[BlockData.RecipeEntry(group='block', name='iron_block', count=1)],block,minecraft:item_frame,radiator;surveillance_camera:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.NONE,BlockData.BlockStates(match='@self', block_states=[BlockData.State(name='default', predicates=[]), BlockData.State(name='stand', predicates=[]), BlockData.State(name='camera', predicates=[])]),Facing.WALL_NORMAL,Sound.INDUSTRIAL,['surveillance_camera'],[<Uses.PLACE: '--local.uses.place'>, <Uses.TICK: '--local.uses.tick'>, <Uses.NO_BASE: '--local.uses.no_base'>],[BlockData.RecipeEntry(group='block', name='iron_block', count=1)],block,minecraft:item_frame,surveillance_camera;security_monitor:base,base_item,blockstates,facing,material,name,path,recipe,sound,tags,unit,Base.NONE,BlockData.BlockStates(match='@self', block_states=[BlockData.State(name='default', predicates=[]), BlockData.State(name='off', predicates=[]), BlockData.State(name='disabled', predicates=[])]),Facing.WALL_NORMAL,Sound.INDUSTRIAL,['security_monitor'],[<Uses.PLACE: '--local.uses.place'>, <Uses.NO_BASE: '--local.uses.no_base'>],[BlockData.RecipeEntry(group='block', name='iron_block', count=1)],block,minecraft:item_frame,security_monitor;padlock:base,base_item,blockstates,facing,name,path,recipe,sound,tags,unitBase.INTERACTIVE,None,None,None,None,['padlock'],[BlockData.RecipeEntry(group='block', name='iron_block', count=1)],item,minecraft:carrot_on_a_stick,padlock;key: